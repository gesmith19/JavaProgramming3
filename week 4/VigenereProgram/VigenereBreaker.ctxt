#BlueJ class context
comment0.params=message\ whichSlice\ totalSlices
comment0.target=java.lang.String\ sliceString(java.lang.String,\ int,\ int)
comment0.text=\r\n\ returns\ a\ string\ consisting\ of\ every\ totalSlices-th\ character\ from\ message,\r\n\ starting\ at\ the\ whichSlice-th\ character\r\n
comment1.params=encrypted\ klength\ mostCommon
comment1.target=int[]\ tryKeyLength(java.lang.String,\ int,\ char)
comment1.text=\r\n\ Find\ the\ shift\ for\ each\ index\ in\ the\ key.\ \ Generate\ the\ key\ (an\ array\ of\ ints)\ and\ return\ it\r\n
comment10.params=encrypted\ languages
comment10.target=void\ breakForAllLanguages(java.lang.String,\ java.util.HashMap)
comment10.text=\r\n\ Decrypt\ message\ using\ all\ langauges\ and\ work\ out\ which\ one\ results\ in\ decrypted\ message\ with\ greatest\r\n\ number\ of\ known\ words.\r\n
comment11.params=dr
comment11.target=java.util.HashMap\ loadDictionaries(edu.duke.DirectoryResource)
comment11.text=\r\n\ \ method\ to\ load\ the\ dictionaries\ in\ the\ given\ directory\ and\ return\ the\ HashMap\r\n
comment12.params=
comment12.target=void\ testSliceString()
comment13.params=
comment13.target=void\ testTryKeyLength()
comment14.params=
comment14.target=void\ quiz1_q1()
comment15.params=
comment15.target=void\ testReadDictionary()
comment16.params=
comment16.target=void\ testMostCommonCharIn()
comment17.params=
comment17.target=void\ testBreakForAllLanguages()
comment18.params=
comment18.target=void\ testLoadDictionaries()
comment19.params=
comment19.target=void\ testBreakVigenere()
comment2.params=
comment2.target=void\ breakVigenere()
comment2.text=\r\n\ Main\ method\ -\ what\ you\ call\ from\ BlueJ\r\n
comment20.params=
comment20.target=void\ ass_q1()
comment21.params=
comment21.target=void\ ass_q3()
comment22.params=
comment22.target=void\ testMostCommonCharInMap()
comment3.params=fr
comment3.target=void\ breakVigenere(edu.duke.FileResource)
comment3.text=\r\n\ GES\ method\ to\ use\ with\ the\ quiz\ and\ assignment\ questions\ where\ they\ specify\ the\ file\r\n
comment4.params=fr
comment4.target=java.util.HashSet\ readDictionary(edu.duke.FileResource)
comment4.text=\r\n\ \ method\ to\ return\ a\ HashSet\ of\ words\ lower-cased\ and\ read\ from\ the\ file\ \r\n\ \ passed\ in\ as\ a\ parameter.\ There\ is\ one\ word\ per\ line.\r\n
comment5.params=message\ dictionary
comment5.target=int\ countWords(java.lang.String,\ java.util.HashSet)
comment5.text=\r\n\ returns\ \#\ of\ valid\ words\ given\ message\ and\ dictionary\ against\ which\ to\ check\ words\ in\r\n\ the\ message.\ \ Lowercases\ the\ word\ before\ checking\ in\ dictionary\r\n
comment6.params=encrypted\ dictionary
comment6.target=java.lang.String\ breakForLanguage(java.lang.String,\ java.util.HashSet)
comment6.text=\r\n\ returns\ the\ decrypted\ string\ for\ a\ given\ dictionary\ and\ there\ is\ 1\ dictionary\ per\ language\r\n
comment7.params=vals
comment7.target=int\ maxIndex(int[])
comment7.text=\r\n\ Return\ the\ index\ with\ the\ most\ entries\r\n
comment8.params=dictionary
comment8.target=char\ mostCommonCharIn(java.util.HashSet)
comment8.text=\r\n\ Return\ the\ most\ common\ character\ in\ the\ words\ in\ the\ dictionary\r\n
comment9.params=dictionary
comment9.target=char\ mostCommonCharInMap(java.util.HashSet)
comment9.text=\r\n\ implementation\ of\ mostCommonCharIn\ using\ a\ HashMap\ to\ hold\ the\ characters\ and\ frequency\ they\ are\ used\r\n
numComments=23
